// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: Accounts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const getAccount = `-- name: GetAccount :one
SELECT id, account_type, tokens, data, version, created_at, updated_at FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.AccountType,
		&i.Tokens,
		&i.Data,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountVersion = `-- name: GetAccountVersion :one
SELECT version FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccountVersion(ctx context.Context, id string) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getAccountVersion, id)
	var version sql.NullInt32
	err := row.Scan(&version)
	return version, err
}

const getRichestAccountsByAccountType = `-- name: GetRichestAccountsByAccountType :many
SELECT account_type, tokens, id 
FROM accounts
GROUP BY account_type, tokens, id
HAVING tokens = MAX(tokens)
`

type GetRichestAccountsByAccountTypeRow struct {
	AccountType string `json:"account_type"`
	Tokens      int64  `json:"tokens"`
	ID          string `json:"id"`
}

func (q *Queries) GetRichestAccountsByAccountType(ctx context.Context) ([]GetRichestAccountsByAccountTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getRichestAccountsByAccountType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRichestAccountsByAccountTypeRow{}
	for rows.Next() {
		var i GetRichestAccountsByAccountTypeRow
		if err := rows.Scan(&i.AccountType, &i.Tokens, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAccount = `-- name: UpsertAccount :exec
INSERT INTO accounts (id, account_type, tokens, data, version)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (id)
DO UPDATE SET account_type=$2, tokens=$3, data=$4, version=$5, updated_at=now()
WHERE accounts.version <= $5
`

type UpsertAccountParams struct {
	ID          string                `json:"id"`
	AccountType string                `json:"account_type"`
	Tokens      int64                 `json:"tokens"`
	Data        pqtype.NullRawMessage `json:"data"`
	Version     sql.NullInt32         `json:"version"`
}

func (q *Queries) UpsertAccount(ctx context.Context, arg UpsertAccountParams) error {
	_, err := q.db.ExecContext(ctx, upsertAccount,
		arg.ID,
		arg.AccountType,
		arg.Tokens,
		arg.Data,
		arg.Version,
	)
	return err
}
