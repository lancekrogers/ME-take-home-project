// Code generated by MockGen. DO NOT EDIT.
// Source: challenge/pkg/db (interfaces: Repo)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "challenge/pkg/db"
	db0 "challenge/pkg/db/sqlc"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockRepo) GetAccount(arg0 context.Context, arg1 string) (db0.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(db0.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockRepoMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockRepo)(nil).GetAccount), arg0, arg1)
}

// GetAccountVersion mocks base method.
func (m *MockRepo) GetAccountVersion(arg0 context.Context, arg1 string) (sql.NullInt32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountVersion", arg0, arg1)
	ret0, _ := ret[0].(sql.NullInt32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountVersion indicates an expected call of GetAccountVersion.
func (mr *MockRepoMockRecorder) GetAccountVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountVersion", reflect.TypeOf((*MockRepo)(nil).GetAccountVersion), arg0, arg1)
}

// GetAllUpdatesForAccount mocks base method.
func (m *MockRepo) GetAllUpdatesForAccount(arg0 context.Context, arg1 string) ([]db0.AccountUpdates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUpdatesForAccount", arg0, arg1)
	ret0, _ := ret[0].([]db0.AccountUpdates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUpdatesForAccount indicates an expected call of GetAllUpdatesForAccount.
func (mr *MockRepoMockRecorder) GetAllUpdatesForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUpdatesForAccount", reflect.TypeOf((*MockRepo)(nil).GetAllUpdatesForAccount), arg0, arg1)
}

// GetRichestAccountsByAccountType mocks base method.
func (m *MockRepo) GetRichestAccountsByAccountType(arg0 context.Context) ([]db0.GetRichestAccountsByAccountTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRichestAccountsByAccountType", arg0)
	ret0, _ := ret[0].([]db0.GetRichestAccountsByAccountTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRichestAccountsByAccountType indicates an expected call of GetRichestAccountsByAccountType.
func (mr *MockRepoMockRecorder) GetRichestAccountsByAccountType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRichestAccountsByAccountType", reflect.TypeOf((*MockRepo)(nil).GetRichestAccountsByAccountType), arg0)
}

// InsertAccountUpdate mocks base method.
func (m *MockRepo) InsertAccountUpdate(arg0 context.Context, arg1 db0.InsertAccountUpdateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccountUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAccountUpdate indicates an expected call of InsertAccountUpdate.
func (mr *MockRepoMockRecorder) InsertAccountUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccountUpdate", reflect.TypeOf((*MockRepo)(nil).InsertAccountUpdate), arg0, arg1)
}

// UpsertAccount mocks base method.
func (m *MockRepo) UpsertAccount(arg0 context.Context, arg1 db0.UpsertAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccount indicates an expected call of UpsertAccount.
func (mr *MockRepoMockRecorder) UpsertAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccount", reflect.TypeOf((*MockRepo)(nil).UpsertAccount), arg0, arg1)
}

// UpsertAccountUpdate mocks base method.
func (m *MockRepo) UpsertAccountUpdate(arg0 context.Context, arg1 *db.UpsertActUpdateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAccountUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccountUpdate indicates an expected call of UpsertAccountUpdate.
func (mr *MockRepoMockRecorder) UpsertAccountUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccountUpdate", reflect.TypeOf((*MockRepo)(nil).UpsertAccountUpdate), arg0, arg1)
}
